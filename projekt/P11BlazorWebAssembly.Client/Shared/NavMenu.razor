@using Blazored.LocalStorage;
@using System.Security.Claims;
@inherits LayoutComponentBase

@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <div class="navbar-title">
            <div class="navbar-logo"></div>
            <a class="navbar-brand" href="">Movie library</a>
        </div>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <div class="navbar-toggler-my-icon"></div>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-list-content">
            <div class="nav-item">
                <div class="nav-link">
                    <span class="oi oi-overview">Overview</span>
                </div>
            </div>
            <div class="nav-list-options">
                <div class="nav-item">
                    <NavLink class="nav-link" href="movies/moviesList">
                        <span class="nav-list-icon nav-list-movie-icon" aria-hidden="true"></span> Movies
                    </NavLink>
                </div>
                <AuthorizeView>
                    <Authorized>
                        <div class="nav-item">
                            <NavLink class="nav-link" href="/login" @onclick="Logout">
                                <span class="nav-list-icon nav-list-logout-icon" aria-hidden="true"></span> Logout
                            </NavLink>
                        </div>
                        @* <div>
                            @context.User.Identity.Name | 
                            @context.User.Claims.Where(c => c.Type == ClaimTypes.Role).FirstOrDefault().Value
                            @context.User.Claims.Where(c => c.Type == "DateCreated").FirstOrDefault().Value
                        </div> *@
                        <div>
                            <div>Logged as:</div>
                            <div class="nav-list-username">
                                @context.User.Identity.Name
                                <br>
                                @context.User.Claims.Where(c => c.Type == ClaimTypes.Role).FirstOrDefault().Value
                            </div>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <div class="nav-item">
                            <NavLink class="nav-link" href="/login">
                                <span class="nav-list-icon nav-list-login-icon" aria-hidden="true"></span> Login
                            </NavLink>
                        </div>
                        <div class="nav-item">
                            <NavLink class="nav-link" href="/register">
                                <span class="nav-list-icon nav-list-register-icon" aria-hidden="true"></span> Register
                            </NavLink>
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>

        
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        await LocalStorageService.RemoveItemAsync("authToken");
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/login");
    }
}