@page "/movies"

@using P06Shop.Shared.Services.MovieService
@using P06Shop.Shared.MovieCollection

@attribute [Authorize]
@inject IMovieService MovieService
@inject NavigationManager NavigationManager

@inject IStringLocalizer<Strings> Loc

<div class="app-page">
    <h1 class="app-header">@Loc["movie-list"]</h1>
    <div class="app-align-left app-full-content-container">
        <div class="app-button-container">
            <a href="movies/create" class="app-secondary-button">@Loc["create-new-movie"]</a>
        </div>
    </div>
    
    @if (movies == null)
    {
        <div class="spinner-border text-secondary" role="status">
            <span class="sr-only"></span>
        </div>
        <p><em>@message</em></p>
    }

    else
    {
        <div class="app-full-content-container">
            <div class="search-container">
                <InputText @bind-Value=searchTerm class="input"></InputText>
                <div class="app-button-container">
                    <button class="app-primary-button" @onclick=Search>@Loc["search"]</button>
                </div>
            </div>
        </div>
        <div class="app-full-content-container">
            <div class="responsive-wrapper">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>@Loc["title"]</th>
                                <th>@Loc["length-in-minutes"]</th>
                                <th>@Loc["release-date"]</th>
                                <th>@Loc["country-of-origin"]</th>
                                <th>@Loc["director"]</th>
                                <th>@Loc["options"]</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var movie in movies)
                            {
                                <tr>
                                    <td>@movie.Title</td>
                                    <td>@movie.LengthInMinutes min</td>
                                    <td>@movie.ReleaseDate.ToShortDateString()</td>
                                    <td>@movie.CountryOfOrigin</td>
                                    <td>@movie.Director</td>
                                    <td>
                                        <div class="app-button-container">
                                            <button class="app-secondary-button" @onclick="()=> GoToEdit(movie.Id)">@Loc["edit"]</button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="app-align-center app-buttons-container">
                <div class="app-button-container">
                    <button class="app-primary-button" disabled="@(currentPage==1)" @onclick="PreviousPage">@Loc["previous"]</button>
                </div>
                <span>@currentPage</span>
                <div class="app-button-container">
                    <button class="app-primary-button" @onclick="NextPage">@Loc["next"]</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Movie> movies;
    private string message;

    private int currentPage = 1;
    private const int pageSize = 10;

    private string searchTerm = "";

    protected override async Task OnInitializedAsync() {
        message = Loc["loading-movie"];

        await LoadMovies();
    }

    private async Task LoadMovies() {
        var response = await MovieService.SearchMoviesAsync(searchTerm, currentPage, pageSize);
        if (response.Success) {
            movies = response.Data;
        } else {
            message = response.Message;
        }
    }

    void GoToEdit(int id) {
        NavigationManager.NavigateTo($"/movies/edit/{id}");
    }

    private async Task PreviousPage() {
        if (currentPage > 1) {
            currentPage--;
            await LoadMovies();
        }
    }

    private async Task NextPage() {
        currentPage++;
        await LoadMovies();
    }

    private async Task Search() {
        currentPage = 1;
        await LoadMovies();
    }
}
