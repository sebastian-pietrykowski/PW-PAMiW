@page "/Login"
@using Blazored.LocalStorage;
@using Microsoft.AspNetCore.Components.Authorization;
@using P06Shop.Shared.Auth;
@using P06Shop.Shared.Services.AuthService;

@inject IAuthService AuthService
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@inject IStringLocalizer<Strings> Loc

<div class="app-page">
    <h1 class="app-header">@Loc["login-header"]</h1>
    <EditForm Model="userLoginDTO" OnValidSubmit="HandleLogin" class="form">
        <DataAnnotationsValidator />
        <div class="app-content-container">
            <div>
                <label for="email" class="app-label">@Loc["email"]:</label>
                <InputText type="email" @bind-Value="userLoginDTO.Email" id="email" class="input"></InputText>
            </div>
            <div>
                <label for="password" class="app-label">@Loc["password"]:</label>
                <InputText type="password" @bind-Value="userLoginDTO.Password" id="password" class="input"></InputText>
            </div>
            <ValidationSummary class="login-validation-summary" />
            <div></div>
            <button class="app-primary-button" type="submit" disabled="@(!context.Validate())">@Loc["login-action"]</button>
            <p>@Loc["register-prompt-description"] <NavLink href="register">@Loc["register-prompt"]</NavLink></p>
            @if(!isLoginSuccess) {
                <p class="app-error-message">@Loc["incorrect-data"]</p>
            }
        </div>
    </EditForm>

    @* @if (!string.IsNullOrEmpty(message))
    {
        <p>@message</p>
    } *@
</div>


@code {

    private UserLoginDTO userLoginDTO = new UserLoginDTO();
    @* private string message = string.Empty; *@
    private bool isLoginSuccess = true;

    private async Task HandleLogin()
    {
        var result = await  AuthService.Login(userLoginDTO);
        if (result.Success)
        {
            await LocalStorageService.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();

            NavigationManager.NavigateTo("/");
        }
        else
        {
            isLoginSuccess = false;
            @* message = result.Message; *@
        }
    }
}
